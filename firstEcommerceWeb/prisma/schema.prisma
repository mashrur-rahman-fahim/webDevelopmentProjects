// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}
enum OrderEventStatus{
  PENDING
 
  OUT_FOR_DELIVERY
   COMPLETED
  CANCELLED
}


model User {
  id              Int        @id @default(autoincrement())
  name            String
  email           String     @unique
  password        String
  role            Role       @default(USER)
  shippingAddress Int?
  billingAddress  Int?
  address         Address[]
  cartItem        CartItem[]
  order           Order[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@map("users")
}



model Products {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  price        Decimal
  tags         String
  cartItem     CartItem[]
  orderProduct OrderProduct[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  
  @@index([name,description,tags])
  @@map("products")
}

model Address {
  id      Int     @id @default(autoincrement())
  lineOne String
  lineTwo String?
  city    String
  pinCode String
  userId  Int
  user    User    @relation(fields: [userId], references: [id])

  @@map("address")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Products @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cartItem")
}

model Order {
  id           Int            @id @default(autoincrement())
  userId       Int
  user         User           @relation(fields: [userId], references: [id])
  netAmount    Decimal
  address String
  orderProduct OrderProduct[]
  orderEvent OrderEvent[]
  
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("orders")
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  quantity  Int
  productId Int
  product   Products @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orderProduct")
}
model OrderEvent{
  id Int @id @default(autoincrement())
  orderId Int
  order Order @relation(fields: [orderId], references: [id])
  status OrderEventStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
